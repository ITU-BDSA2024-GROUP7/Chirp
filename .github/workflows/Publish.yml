name: Publish
on:
  push:
    tags:
      - 'v*'  # This will trigger the workflow on any tag starting with 'v'

jobs:
  build_web:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies for Web
        run: dotnet restore src/Chirp.Web/Chirp.Web.csproj

      - name: Build Web
        run: dotnet build src/Chirp.Web/Chirp.Web.csproj --no-restore
  
  unit_test:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies for Unit Tests
        run: dotnet restore test/Chirp.TestUnit/Chirp.TestUnit.csproj

      - name: Run Unit Tests
        env:
          AUTHENTICATION_GITHUB_CLIENTID: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTID }}
          AUTHENTICATION_GITHUB_CLIENTSECRET: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTSECRET }}
        run: dotnet test test/Chirp.TestUnit/Chirp.TestUnit.csproj --verbosity normal
  
  integration_test:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies for Integration Tests
        run: dotnet restore test/Chirp.TestIntegration/Chirp.TestIntegration.csproj

      - name: Run Integration Tests
        env:
          AUTHENTICATION_GITHUB_CLIENTID: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTID }}
          AUTHENTICATION_GITHUB_CLIENTSECRET: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTSECRET }}
        run: dotnet test test/Chirp.TestIntegration/Chirp.TestIntegration.csproj --verbosity normal
  
  e2e_test:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies for End To End Tests
        run: |
          dotnet restore test/Chirp.TestE2E/Chirp.TestE2E.csproj

      - name: Build End To End Tests
        run: dotnet build test/Chirp.TestE2E/Chirp.TestE2E.csproj --no-restore

      - name: Run Web Application
        run: dotnet run --project src/Chirp.Web/Chirp.Web.csproj --urls "http://localhost:5273" &
        env:
          AUTHENTICATION_GITHUB_CLIENTID: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTID }}
          AUTHENTICATION_GITHUB_CLIENTSECRET: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTSECRET }}

      - name: Wait for Web Application to Start
        run: sleep 10

      - name: Install Playwright
        run: pwsh test/Chirp.TestE2E/bin/Debug/net8.0/playwright.ps1 install

      - name: End To End Test
        env:
          AUTHENTICATION_GITHUB_CLIENTID: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTID }}
          AUTHENTICATION_GITHUB_CLIENTSECRET: ${{ secrets.AUTHENTICATION_GITHUB_CLIENTSECRET }}
          GITHUBTESTACCOUNTUSERNAME: ${{ secrets.GITHUBTESTACCOUNTUSERNAME }}
          GITHUBTESTACCOUNTPASSWORD: ${{ secrets.GITHUBTESTACCOUNTPASSWORD }}
        run: |
          dotnet test test/Chirp.TestE2E/Chirp.TestE2E.csproj --filter "Category=End2End" --verbosity normal

  release:
    timeout-minutes: 60
    name: Release
    needs: [unit_test, integration_test, e2e_test]
    strategy:
      matrix:
        kind: [linux-x64, win-x64, osx-x64, osx-arm64]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x.x

      - name: Build
        run: |
          # Variables
          tag=$(git describe --tags --abbrev=0)
          release_name="Chirp-$tag-${{ matrix.kind }}"
          
          # Build
          dotnet publish src/Chirp.Web/Chirp.Web.csproj -r ${{ matrix.kind }} -c Release -o "$release_name"
          
          # Zip files
          zip -r "${release_name}.zip" "$release_name"
          
          # Delete output directory
          rm -r "$release_name"
        
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "Chirp*.zip"
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
