name: Publish
on:
  push:
    tags:
      - 'v*'  # This will trigger the workflow on any tag starting with 'v'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore src/Chirp.CLI.Client/Chirp.CLI.csproj

      - name: Restore dependencies CSVDB
        run: dotnet restore test/Chirp.CSVDB.Tests/Chirp.CSVDB.Tests.csproj

      - name: Restore dependencies unix
        run: dotnet restore test/Chirp.CLI.Client.Tests/Chirp.CLI.Client.Tests.csproj

      - name: Run tests integration
        run: dotnet test test/Chirp.CSVDB.Tests/Chirp.CSVDB.Tests.csproj --verbosity normal

      - name: Run tests unix
        run: dotnet test test/Chirp.CLI.Client.Tests/Chirp.CLI.Client.Tests.csproj --verbosity normal

  release:
    timeout-minutes: 60
    name: Release
    needs: test
    strategy:
      matrix:
        kind: ['linux', 'windows', 'macOS']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
          - kind: macOS
            os: macos-latest
            target: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Build for all platforms
        if: env.SKIP_RELEASE != 'true'
        run: |
          dotnet publish src/Chirp.CLI.Client/Chirp.CLI.csproj -c Release -r ${{ matrix.target }} -f net7.0 --self-contained false -o publish/${{ matrix.target }}

      - name: Zip the output
        if: env.SKIP_RELEASE != 'true'
        run: |
          mkdir -p Chirp
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Ensure only the .exe file is included in the ZIP
            zip -j Chirp/chirp-${{ matrix.target }}.zip publish/${{ matrix.target }}/Chirp.CLI.Client.exe
          else
            # Ensure only the publish output is included in the ZIP
            zip -r Chirp/chirp-${{ matrix.target }}.zip publish/${{ matrix.target }}/*
          fi
        shell: bash

      - name: Upload release artifacts
        if: env.SKIP_RELEASE != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: chirp-${{ matrix.target }}.zip
          path: Chirp/chirp-${{ matrix.target }}.zip

      - name: Create GitHub Release (without source code)
        if: env.SKIP_RELEASE != 'true'
        run: |
          # Create a release without attaching the source code files
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "${{ github.ref }}",
              "target_commitish": "${{ github.sha }}",
              "name": "Release ${{ github.ref }}",
              "body": "Release notes for version ${{ github.ref }}",
              "draft": false,
              "prerelease": false
            }' \
            https://api.github.com/repos/${{ github.repository }}/releases

      - name: Upload Artifacts to Release
        if: env.SKIP_RELEASE != 'true'
        run: |
          # Get the release ID
          RELEASE_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref }} | jq -r '.id')

          # Upload the ZIP file to the release
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @Chirp/chirp-${{ matrix.target }}.zip \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=chirp-${{ matrix.target }}.zip"
